Catch <-c(0,0,3,0,1,0,0,6,64,0,3,0,0,17,2,69,47,25,10,1,0)
values <-c(Total, Catch)
type <-c(rep("Total", 21), rep("Catch", 21))
mydata <-data.frame(Location, values)
mydata
mydata$Location <-factor(mydata$Location,
levels = c("Merimbula", "Batemans Bay", "Mollymook", "Sussex Inlet", "Kiama", "Bondi", "Redhead", "Hawks Nest", "Forster", "Old Bar", "Port Macquarie", "Crescent Head", "South West Rocks", "Coffs Harbour",
"Yamba", "Evans Head", "Ballina Lighthouse", "Ballina", "Lennox Head", "Byron Bay", "Kingscliff" ))
p <-ggplot(mydata, aes(Location, values))
q<- p +geom_bar(stat = "identity", aes(fill = type), width=0.8, position="dodge")
+theme_minimal()+coord_flip()
q+ theme_minimal()+coord_flip() + theme(legend.position="none", axis.title.x=element_blank(), axis.title.y=element_blank())
Location <-rep(c("Merimbula", "Batemans Bay", "Mollymook", "Sussex Inlet", "Kiama", "Bondi", "Redhead", "Hawks Nest", "Forster", "Old Bar", "Port Macquarie", "Crescent Head", "South West Rocks", "Coffs Harbour",
"Yamba", "Evans Head", "Ballina Lighthouse", "Ballina", "Lennox Head", "Byron Bay", "Kingscliff"), 2)
Total <-c(1,2,0,10,8,1,8,35,63,36,75,58,42,15,22,18,21,28,26,13,6)
Catch <-c(0,0,3,0,1,0,0,6,64,0,3,0,0,17,2,69,47,25,10,1,0)
values <-c(Total, Catch)
type <-c(rep("Total", 21), rep("Catch", 21))
mydata <-data.frame(Location, values)
mydata
mydata$Location <-factor(mydata$Location,
levels = c("Merimbula", "Batemans Bay", "Mollymook", "Sussex Inlet", "Kiama", "Bondi", "Redhead", "Hawks Nest", "Forster", "Old Bar", "Port Macquarie", "Crescent Head", "South West Rocks", "Coffs Harbour",
"Yamba", "Evans Head", "Ballina Lighthouse", "Ballina", "Lennox Head", "Byron Bay", "Kingscliff" ))
p <-ggplot(mydata, aes(Location, values))
q<- p +geom_bar(stat = "identity", aes(fill = type), width=0.8, position="dodge")
q+ theme_minimal()+coord_flip() + theme(legend.position="none", axis.title.x=element_blank(), axis.title.y=element_blank())
q+scale_fill_manual(values=c("skyblue2", "navyblue"))+ theme(legend.position="none", axis.title.x=element_blank(),axis.title.y=element_blank())
q+ theme_minimal()+coord_flip() + theme(legend.position="none", axis.title.x=element_blank(), axis.title.y=element_blank())
q+theme_minimal()+coord_flip()+scale_fill_manual(values=c("skyblue2", "navyblue"))+ theme(legend.position="none", axis.title.x=element_blank(),axis.title.y=element_blank())
q+scale_y_continuous(labels = c("2k", "4k","6k","8k"))
q
q+theme_minimal()+coord_flip()+scale_fill_manual(values=c("skyblue2", "navyblue"))+ theme(legend.position="none", axis.title.x=element_blank(),axis.title.y=element_blank())
q+scale_y_continuous(labels = c("1","2k", "4k","6k","8k","3k","7s","7k"))
Location <-rep(c("Merimbula", "Batemans Bay", "Mollymook", "Sussex Inlet", "Kiama", "Bondi", "Redhead", "Hawks Nest", "Forster", "Old Bar", "Port Macquarie", "Crescent Head", "South West Rocks", "Coffs Harbour",
"Yamba", "Evans Head", "Ballina Lighthouse", "Ballina", "Lennox Head", "Byron Bay", "Kingscliff"), 2)
Total <-c(1,2,0,10,8,1,8,35,63,36,75,58,42,15,22,18,21,28,26,13,6)
Catch <-c(0,0,3,0,1,0,0,6,64,0,3,0,0,17,2,69,47,25,10,1,0)
values <-c(Total, Catch)
type <-c(rep("Total", 21), rep("Catch", 21))
mydata <-data.frame(Location, values)
mydata
mydata$Location <-factor(mydata$Location,
levels = c("Merimbula", "Batemans Bay", "Mollymook", "Sussex Inlet", "Kiama", "Bondi", "Redhead", "Hawks Nest", "Forster", "Old Bar", "Port Macquarie", "Crescent Head", "South West Rocks", "Coffs Harbour",
"Yamba", "Evans Head", "Ballina Lighthouse", "Ballina", "Lennox Head", "Byron Bay", "Kingscliff" ))
p <-ggplot(mydata, aes(Location, values))
q<- p +geom_bar(stat = "identity", aes(fill = type), width=0.8, position="dodge")
q+ theme_minimal()+coord_flip() + theme(legend.position="none", axis.title.x=element_blank(), axis.title.y=element_blank())
q+theme_minimal()+coord_flip()+scale_fill_manual(values=c("skyblue2", "navyblue"))+ theme(legend.position="none", axis.title.x=element_blank(),axis.title.y=element_blank())
library("oce")
library(tidyverse)
t <- as.POSIXct("2016-11-30", tz="UTC") + seq(0, 732*24*3600, 3600)
angle<-moonAngle(t, -30.3, 153.1, useRefraction=TRUE)
angle$lambda <- NULL
angle$declination <- NULL
angle$rightAscension<-NULL
angle$altitude<-NULL
angle$azimuth<-NULL
angle$illuminatedFraction<-NULL
angle$diameter<-NULL
angle$distance<-NULL
angle$beta<-NULL
#to convert list into df
write.csv(angle, file = "angle.csv")
angle<-read_csv(file.choose())
getwd()
angle<-read_csv(file.choose())
#delete X1 column
angle$X1<-NULL
#to add a column that only contains the decimal part of the phase number
angle$moonphase<-angle$phase-floor(angle$phase)
#delete phase column
angle$phase<-NULL
# Neue Column mit NSW Zeit einfügen
angle$nswtime<-format(angle$time,tz="Australia/NSW",usetz="TRUE")
#Delete time column
angle$time<-NULL
head(angle)
head(angle,20)
#delete first 13 rows to get a 00:00 November 30th, 2016 start date
angle2 <- angle[-c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13), ]
head(angle2)
tail(angle2, 20)
head(angle3,40)
tail(angle2,40)
setwd()
setwd("/Users/juliaspaet/Documents/GitHub/VR4G")
getwd()
t <- as.POSIXct("2016-11-30", tz="UTC") + seq(0, 731*24*3600, 3600)
angle<-moonAngle(t, -30.3, 153.1, useRefraction=TRUE)
angle$lambda <- NULL
angle$declination <- NULL
angle$rightAscension<-NULL
angle$altitude<-NULL
angle$azimuth<-NULL
angle$illuminatedFraction<-NULL
angle$diameter<-NULL
angle$distance<-NULL
angle$beta<-NULL
#to convert list into df
write.csv(angle, file = "angle.csv")
angle<-read_csv(file.choose())
#delete X1 column
angle$X1<-NULL
#to add a column that only contains the decimal part of the phase number
angle$moonphase<-angle$phase-floor(angle$phase)
#delete phase column
angle$phase<-NULL
# Neue Column mit NSW Zeit einfügen
angle$nswtime<-format(angle$time,tz="Australia/NSW",usetz="TRUE")
#Delete time column
angle$time<-NULL
head(angle)
#delete first 13 rows to get a 00:00 November 30th, 2016 start date
angle2 <- angle[-c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13), ]
head(angle2)
tail(angle,10)
tail(angle,12)
tail(angle2,30)
tail(angle,20)
#delete last 12 rows to get a 23:00 November 30th, 2018 end date
angle3 <- angle2[-c(17556,17555,17554,17553,17552,17551,17550,17549,17548,17547,17546,17545),]
tail(angle3,20)
nrow(angle3)
tail(angle,2)
nrow(angle2)
#delete last 12 rows to get a 23:00 November 30th 2018,t end date
angle3 <- angle2[-c(17532,17531,17530,17529,17528,17527,17526,17525,17524,17523,17522,17521),]
tail(angle3)
#add column with bin sequence
angle3$timebins<-rep(0:23, times=731, each=1)
head(angle3)
#add column with bin sequence
angle3$timebins<-rep(0:23, times=732, each=1)
#add column with bin sequence
angle3$timebins<-rep(0:23, times=730, each=1)
#remove time from nswtime column
angle3$nswtime<-as.Date(sub('(\\d+/\\d+/\\d+) .*','\\1',angle3$nswtime),'%Y-%m-%d')
#Rename 'nswtime' column to 'date'
colnames(angle3)[colnames(angle3)=="nswtime"] <- "date"
head(angle3)
write.csv(angle3, file="moonphase.csv")
library(tidyverse)
DateSequence <-seq(as.Date ("2016-12-01"), as.Date("2018-11-30"), by= "day")
Stations <- tibble(Station=c("Ballina","Batemans", "Bondi", "Byron", "Coffs",
"Crescent", "Evans", "Forster", "Hawks", "Kiama",
"Kingscliff", "Merimbula","Mollymook","Old",
"Port", "Redhead","South","Sussex","Yamba")) %>%
split(.$Station) %>%
map(function(x) { tibble(Hour = seq(0, 23), Station=x$Station) }) %>%
bind_rows()
Study_Oceanography <- Study_Period %>%
rowid_to_column('Row') %>%
split(.$Row) %>%
map(function(x) { Stations %>% mutate(Period=x$Period, Date=x$Date) }) %>%
bind_rows()
DateSequence <-seq(as.Date ("2016-12-01"), as.Date("2018-11-30"), by= "day")
Study_Period <- tibble(Date=seq(as.Date('2016-11-30'), as.Date('2018-11-30'), by='day'),
Phase=NA
)
Stations <- tibble(Station=c("Ballina","Batemans", "Bondi", "Byron", "Coffs",
"Crescent", "Evans", "Forster", "Hawks", "Kiama",
"Kingscliff", "Merimbula","Mollymook","Old",
"Port", "Redhead","South","Sussex","Yamba")) %>%
split(.$Station) %>%
map(function(x) { tibble(Hour = seq(0, 23), Station=x$Station) }) %>%
bind_rows()
Study_Oceanography <- Study_Period %>%
rowid_to_column('Row') %>%
split(.$Row) %>%
map(function(x) { Stations %>% mutate(Period=x$Period, Date=x$Date) }) %>%
bind_rows()
head(Study_Period)
head(DateSequence)
head(Stations)
head(angle3)
Study_Period <- tibble(date=seq(as.Date('2016-12-01'), as.Date('2018-11-30'), by='day'))
Locations <- tibble(location=c("Ballina","Batemans", "Bondi", "Byron", "Coffs",
"Crescent", "Evans", "Forster", "Hawks", "Kiama",
"Kingscliff", "Merimbula","Mollymook","Old",
"Port", "Redhead","South","Sussex","Yamba")) %>%
split(.$location) %>%
map(function(x) { tibble(timebins = seq(0, 23), location=x$location) }) %>%
bind_rows()
head(locations)
head(Locations)
Study_Oceanography <- Study_Period %>%
rowid_to_column('Row') %>%
split(.$Row) %>%
map(function(x) { Locations %>% mutate(date=x$date) }) %>%
bind_rows()
head(Study_Oceanography)
nrow(Study_Oceanography)
tail(Study_Oceanography)
Study_Period <- tibble(date=seq(as.Date('2016-12-01'), as.Date('2018-11-30'), by='day'))
Locations <- tibble(location=c("Ballina","Batemans", "Bondi", "Byron", "Coffs",
"Crescent", "Evans", "Forster", "Hawks", "Kiama",
"Kingscliff", "Merimbula","Mollymook","Old",
"Port", "Redhead","South","Sussex","Yamba")) %>%
split(.$location) %>%
map(function(x) { tibble(timebin = seq(0, 23), location=x$location) }) %>%
bind_rows()
timebin_location_date <- Study_Period %>%
rowid_to_column('Row') %>%
split(.$Row) %>%
map(function(x) { Locations %>% mutate(date=x$date) }) %>%
bind_rows()
head(timebin_location_date)
temperature <- read.csv(file.choose())
temperature <- read.csv(file.choose())
head(temperature)
#rename col names
colnames(temperature)[colnames(temperature)=="Location"] <- "location"
colnames(temperature)[colnames(temperature)=="Temp"] <- "temperature"
colnames(temperature)[colnames(temperature)=="Date"] <- "date"
colnames(temperature)[colnames(temperature)=="Bins"] <- "timebin"
#merge by date, location and timebin
Temperature_final <- timebin_location_date %>%
left_join(temperature, by='date', by='location', by='timebin')
library(dplyr)
#merge by date, location and timebin
Temperature_final <- timebin_location_date %>%
left_join(temperature, by='date', by='location', by='timebin')
left_join(temperature, by= c('date' = 'date','location' = 'location', 'timebin' = 'timebin')
#merge by date, location and timebin
Temperature_final <- timebin_location_date %>%
left_join(temperature, by= c('date' = 'date','location' = 'location', 'timebin' = 'timebin'))
#merge by date, location and timebin
Temperature_final <- timebin_location_date %>%
left_join(temperature,timebin_location_date,
by= c('date' = 'date','location' = 'location', 'timebin' = 'timebin'))
head(timebin_location_date)
head(temperature)
class(temperature)
class(timebin_location_date)
temperature<-mutate(date=x$date)
temperature<-mutate(date=$date)
temperature<-mutate(date=date)
temperature<-mutate(date=temperature$date)
head(temperature)
temperature< map(function(x) {temperature %>% mutate(date=x$date)
temperature< map(function(x) {temperature %>% mutate(date=x$date)})
temperature< map(function(x) {temperature %>% mutate(date=x$date)}) %>%
#merge by date, location and timebin
Temperature_final <- timebin_location_date %>%
left_join(temperature,timebin_location_date,
by= c('date' = 'date','location' = 'location', 'timebin' = 'timebin'))
temperature< map(function(x) {temperature %>% mutate(date=x$date)}) %>%
#merge by date, location and timebin
Temperature_final <- timebin_location_date %>%
left_join(temperature,timebin_location_date,
by= c('date' = 'date','location' = 'location', 'timebin' = 'timebin'))
temperature<- map(function(x) {temperature %>% mutate(date=x$date) }) %>%
#merge by date, location and timebin
Temperature_final <- timebin_location_date %>%
left_join(temperature,timebin_location_date,
by= c('date' = 'date','location' = 'location', 'timebin' = 'timebin'))
temperature<- map(function(x) {temperature %>% mutate(date=x$date) })
temperature<- map(function(x) {temperature mutate(date=x$date) })
temperature<- map(function(x) {temperature, mutate(date=x$date) })
mutate(temperature, date= as.Date(date, format= "%Y-%m-%d")
mutate(temperature, date= as.Date(date, format= "%Y-%m-%d"))
temperature2<-mutate(temperature, date= as.Date(date, format= "%Y-%m-%d"))
head(temperature2)
class(temperature)
#merge by date, location and timebin
Temperature_final <- timebin_location_date %>%
left_join(temperature2,timebin_location_date,
by= c('date' = 'date','location' = 'location', 'timebin' = 'timebin'))
head (Temperature_final)
library(zoo)
z <- zoo(c(2,NA,1,4,5,2), c(1,3,4,6,7,8))
head(z)
z
na.approx(z)
na.approx(z, 1:6)
na.approx(zoo(c(NA,9,3,2,3,2)))
nrow(Temperature_final)
install.packages("imputeTS")
library(imputeTS)
#interpolate missing temperature values
Temp_final<-na.interpolation(Temperature_final$temperature)
head(Temp_final,20)
Temperature_final$inter_temp<-na.interpolation(Temperature_final$temperature)
head(Temperature_final)
head(Temperature_final,20)
view(Temperature_final)
View(Temperature_final)
#
Location.list<-levels(Temperature_final$location)
head(Location.list)
Location.list
View(Temperature_final)
Temp_final <- Temperature_final %>%
split(.$location) %>%
map(na.interpolation(Temperature_final$temperature)) %>%
inter <- function(Temperature_final$inter_temp) {na.interpolation(Temperature_final$temperature)}
inter <- function(Temperature_final) {na.interpolation(Temperature_final$temperature)}
Temp_final <- Temperature_final %>%
split(.$location) %>%
map(inter) %>%
head(Temp_final)
mtcars %>%
mtcars
mtcars
mtcars %>%
split(.$cyl) %>%
split(.$cyl) %>% # from base R
map(~ lm(mpg ~ wt, data = .)) %>%
map(summary) %>%
map_dbl("r.squared")
mtcars %>%
split(.$cyl) %>% # from base R
map(~ lm(mpg ~ wt, data = .)) %>%
map(summary) %>%
map_dbl("r.squared")
# apply gen function to every shark. Combination of split and map achieves
# the looping (see library purr and Hadley's book)
All_Tagged_Sharks <- Tagging_Dates %>%
split(.$ID) %>%
map(gen) %>%
# joins it all into one dataframe
bind_rows()
df <- tibble(
a = rnorm(10),
b = rnorm(10),
c = rnorm(10),
d = rnorm(10)
)
df
Test<-split(.$location)
Test<-split(Temperature_final$location)
library(tidyverse)
library(dplyr)
library(zoo)
library(imputeTS)
#generate tibble with study period dates
Study_Period <- tibble(date=seq(as.Date('2016-12-01'), as.Date('2018-11-30'), by='day'))
#generate tibble with VR4G locations
Locations <- tibble(location=c("Ballina","Batemans", "Bondi", "Byron", "Coffs",
"Crescent", "Evans", "Forster", "Hawks", "Kiama",
"Kingscliff", "Merimbula","Mollymook","Old",
"Port", "Redhead","South","Sussex","Yamba")) %>%
split(.$location) %>%
map(function(x) { tibble(timebin = seq(0, 23), location=x$location) }) %>%
bind_rows()
#load temperature csv file including hobo and missing data for certain locations
temperature <- read.csv(file.choose())
#rename col names
colnames(temperature)[colnames(temperature)=="Location"] <- "location"
colnames(temperature)[colnames(temperature)=="Temp"] <- "temperature"
colnames(temperature)[colnames(temperature)=="Date"] <- "date"
colnames(temperature)[colnames(temperature)=="Bins"] <- "timebin"
temperature2<-mutate(temperature, date= as.Date(date, format= "%Y-%m-%d"))
#merge by date, location and timebin
Temperature_final <- timebin_location_date %>%
left_join(temperature2,timebin_location_date,
by= c('date' = 'date','location' = 'location', 'timebin' = 'timebin'))
head(temperature)
timebin_location_date <- Study_Period %>%
rowid_to_column('Row') %>%
split(.$Row) %>%
map(function(x) { Locations %>% mutate(date=x$date) }) %>%
bind_rows()
#merge by date, location and timebin
Temperature_final <- timebin_location_date %>%
left_join(temperature2,timebin_location_date,
by= c('date' = 'date','location' = 'location', 'timebin' = 'timebin'))
Test<-split(Temperature_final$location)
Test<-Temperature_final %>% split(.$location) %>%
(map(function(Temperature.final)
Temperature_final$inter_temp<-na.interpolation(Temperature_final$temperature) ))
inter<- function (x) {na.interpolation(x$temperature)}
inter<- function (x) {x$inter_temp<-na.interpolation(x$temperature)}
Test<-Temperature_final %>% split(.$location) %>%
(map(function(Temperature.final)
Temperature_final$inter_temp<-na.interpolation(Temperature_final$temperature) ))
Test<-Temperature_final %>% split(.$location) %>%
(map(inter(Temperature.final)
Temperature_final$inter_temp<-na.interpolation(Temperature_final$temperature) ))
Test<-Temperature_final %>% split(.$location) %>%
(map(inter(Temperature.final))
Temperature_final$inter_temp<-na.interpolation(Temperature_final$temperature) ))
Test<-Temperature_final %>% split(.$location) %>%
(map(inter(Temperature.final))
Temperature_final$inter_temp<-na.interpolation(Temperature_final$temperature) )
Test<-Temperature_final %>% split(.$location) %>%
map(inter) %>%
Temp_final <- Temperature_final %>%
split(.$location) %>%
map(gen) %>%
# joins it all into one dataframe
bind_rows()
Test<-Temperature_final %>% split(.$location) %>%
map(inter) %>%
Temp_final <- Temperature_final %>%
split(.$location) %>%
map(inter) %>%
# joins it all into one dataframe
bind_rows()
Test<-Temperature_final %>% split(.$location) %>%
map(inter) %>%
Temp_final <- Temperature_final %>%
split(.$location) %>%
map(inter) %>%
#
Location.list<-levels(Temperature_final$location)
Test<-Temperature_final %>% split(.$location) %>%
map(inter) %>%
Temp_final <- Temperature_final %>%
split(.$location) %>%
map(inter) %>%
Test<-Temperature_final %>% split(.$location) %>%
map(inter) %>%
Temp_final <- Temperature_final %>%
split(.$location) %>%
map(inter)
Test<-Temperature_final %>% split(.$location) %>%
map(inter) %>%
Temp_final <- Temperature_final %>%
split(.$location) %>%
map(inter)
library(magrittr)
Test<-Temperature_final %>% split(.$location) %>%
map(inter) %>%
Temp_final <- Temperature_final %>%
split(.$location) %>%
map(inter)
colnames(temperature)[colnames(temperature)=="Location", "Temp", "Date", "Bins"]
Test<-Temperature_final %>% split(.$location) %>%
map(inter) %>%
Temp_final <- Temperature_final %>%
split(.$location) %>%
map(inter)%>%
bind_rows()
head(Temp_final)
#generate tibble with study period dates
Study_Period <- tibble(date=seq(as.Date('2016-12-01'), as.Date('2018-11-30'), by='day'))
#generate tibble with VR4G locations
Locations <- tibble(location=c("Ballina","Batemans", "Bondi", "Byron", "Coffs",
"Crescent", "Evans", "Forster", "Hawks", "Kiama",
"Kingscliff", "Merimbula","Mollymook","Old",
"Port", "Redhead","South","Sussex","Yamba")) %>%
#load temperature csv file including hobo and missing data for certain locations
temperature <- read.csv(file.choose())
#rename col names
colnames(temperature)[colnames(temperature)=="Location"] <- "location"
#generate tibble with study period dates
Study_Period <- tibble(date=seq(as.Date('2016-12-01'), as.Date('2018-11-30'), by='day'))
#generate tibble with VR4G locations
Locations <- tibble(location=c("Ballina","Batemans", "Bondi", "Byron", "Coffs",
"Crescent", "Evans", "Forster", "Hawks", "Kiama",
"Kingscliff", "Merimbula","Mollymook","Old",
"Port", "Redhead","South","Sussex","Yamba")) %>%
#load temperature csv file including hobo and missing data for certain locations
temperature <- read.csv(file.choose())
#generate tibble with VR4G locations
Locations <- tibble(location=c("Ballina","Batemans", "Bondi", "Byron", "Coffs",
"Crescent", "Evans", "Forster", "Hawks", "Kiama",
"Kingscliff", "Merimbula","Mollymook","Old",
"Port", "Redhead","South","Sussex","Yamba")) %>%
#load temperature csv file including hobo and missing data for certain locations
temperature <- read.csv(file.choose())
#generate tibble with VR4G locations
Locations <- tibble(location=c("Ballina","Batemans", "Bondi", "Byron", "Coffs",
"Crescent", "Evans", "Forster", "Hawks", "Kiama",
"Kingscliff", "Merimbula","Mollymook","Old",
"Port", "Redhead","South","Sussex","Yamba"))
#rename col names
colnames(temperature)[colnames(temperature)=="Location"] <- "location"
colnames(temperature)[colnames(temperature)=="Temp"] <- "temperature"
colnames(temperature)[colnames(temperature)=="Date"] <- "date"
colnames(temperature)[colnames(temperature)=="Bins"] <- "timebin"
temperature2<-mutate(temperature, date= as.Date(date, format= "%Y-%m-%d"))
#merge by date, location and timebin
Temperature_final <- timebin_location_date %>%
left_join(temperature2,timebin_location_date,
by= c('date' = 'date','location' = 'location', 'timebin' = 'timebin'))
head(Temperature_final)
inter<- function (x) {x$inter_temp<-na.interpolation(x$temperature)}
Temp_final <- Temperature_final %>%
split(.$location) %>%
map(inter)%>%
bind_rows()
Temp_final <- Temperature_final %>%
split(.$location) %>%
map(inter)%>%
bind_rows(x,.location)
Temp_final <- Temperature_final %>%
split(.$location) %>%
map(inter)%>%
bind_rows(.$location)
head(timebin_location_date)
#generate tibble with study period dates
Study_Period <- tibble(date=seq(as.Date('2016-12-01'), as.Date('2018-11-30'), by='day'))
#generate tibble with VR4G locations
Locations <- tibble(location=c("Ballina","Batemans", "Bondi", "Byron", "Coffs",
"Crescent", "Evans", "Forster", "Hawks", "Kiama",
"Kingscliff", "Merimbula","Mollymook","Old",
"Port", "Redhead","South","Sussex","Yamba"))
#load temperature csv file including VR4G and Hobo data
temperature <- read.csv(file.choose())
#rename col names
colnames(temperature)[colnames(temperature)=="Location"] <- "location"
colnames(temperature)[colnames(temperature)=="Temp"] <- "temperature"
colnames(temperature)[colnames(temperature)=="Date"] <- "date"
colnames(temperature)[colnames(temperature)=="Bins"] <- "timebin"
temperature2<-mutate(temperature, date= as.Date(date, format= "%Y-%m-%d"))
#merge by date, location and timebin
Temperature_final <- timebin_location_date %>%
left_join(temperature2,timebin_location_date,
by= c('date' = 'date','location' = 'location', 'timebin' = 'timebin'))
head(Temperature_final)
